<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Learning | 八 queue]]></title>
      <url>%2F2017%2F05%2F03%2FLearning-8%2F</url>
      <content type="text"><![CDATA[###队列队列（queue）是先进先出（FIFO first in first out）的线性表，通常用数组或者链表来实现]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Learning | 七 Decorator]]></title>
      <url>%2F2017%2F04%2F27%2FLearning-7%2F</url>
      <content type="text"><![CDATA[Decorator-切面编程Decorator 是23种经典设计模式之一 装饰器模式，是切面编程的具体实现。最显著的是数据统计，统计不同场景下用户的行为跟踪，糟糕的做法是在每个要做统计的地方写上代码，但如果有代码变动，就会影响原来的功能，这时 装饰器模式就显得有点突出了。 在不改变主体实现的情况下，为主体hock上新的特性和功能，这就是Decorator 重要的一点：要确保 decorator 的返回内容仍然是一个有意义的函数或方法，并且实现了原函数为使连接有用而做的事情。 Python中的函数是对象： 可以被赋值给其他变量 可以作为返回值 可以被定义在其他函数内 那现在对decorator详细定义： 装饰器是一个函数,一个用来包装函数的函数 装饰器在函数调用之后返回一个修改之后的函数对象，将其重新赋值原来的标识符，并永久丧失对原始函数对象的访问(申明的函数被换成一个被装饰器装饰过后的函数) 当我们对某个方法应用了装饰方法后， 其实就改变了被装饰函数名称所引用的函数代码块入口点，使其重新指向了由装饰方法所返回的函数入口点。如object-c中用runtime对函数进行swizzling. 由此我们可以用decorator改变某个原有函数的功能，添加各种操作，或者完全改变原有实现 Decorator的原则是:&gt; 把要装饰的方法作为输入参数，&gt; 在函数内可以添加一切附加的实现(这就提供了很强大的可扩展性)，&gt; 只要确保最后返回一个可执行的函数（可以是原来的origin函数，也可以是新定义的函数） decorator分为 无参 和 有参，下面对无参和有参decorator去包装无参和有参的函数进行示范 无参装饰器 &amp; 包装无参函数 def decorator(func): print &quot;hello&quot; return func @decorator def foo(): pass foo() #执行 foo()执行时相当于执行了： foo = decorator(foo) foo() 无参装饰器 &amp; 包装有参函数 def decorator_func_args(func): def handle_args(*args, **kwargs): #处理传入函数的参数 print &quot;begin&quot; func(*args, **kwargs) #函数调用 print &quot;end&quot; return handle_args @decorator_func_args def foo2(a, b=2): print a, b foo2(1) #执行 foo2(1)执行时相当于执行了： foo2 = decorator_func_args(foo2) foo2(1) 有参装饰器 &amp; 包装无参函数 def decorator_with_params(arg_of_decorator):#这里是装饰器的参数 print arg_of_decorator #最终被返回的函数 def newDecorator(func): print func return func return newDecorator @decorator_with_params(&quot;deco_args&quot;) def foo3(): pass foo3() #执行 有参装饰器 &amp; 包装有参函数 def decorator_args_func_args(decorator_args): print &apos;decorator自定义，输出：%s&apos; % decorator_args def newDecorator(func): print &apos;自定义函数实现&apos; def newFunc_args(*args,**kwargs): func(*args,**kwargs) return newFunc_args return newDecorator; @decorator_args_func_args(&apos;this is decorator_args&apos;) def func_args(a,b=18): c = a+b print &apos;func_args output,value = %s&apos; % c - - - 且听下回分解 - - -]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Learning | 六 迭代]]></title>
      <url>%2F2017%2F04%2F14%2FLearning-6%2F</url>
      <content type="text"><![CDATA[##Python3 迭代器与生成器迭代器 迭代是Python最强大的功能之一，是访问集合元素的一种方式。 迭代器是一个可以记住遍历的位置的对象。 迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。 ( 迭代器只能往前不会后退 )。 迭代器有两个基本的方法：iter() 和 next()。 字符串，列表或元组对象都可用于创建迭代器： &gt;&gt;&gt; list=[1,2,3,4] &gt;&gt;&gt; it = iter(list) # 创建迭代器对象 &gt;&gt;&gt; print (next(it)) # 输出迭代器的下一个元素 1 &gt;&gt;&gt; print (next(it)) 2 &gt;&gt;&gt; 迭代器对象可以使用常规for语句进行遍历： #!/usr/bin/python3 list=[1,2,3,4] it = iter(list) # 创建迭代器对象 for x in it: print (x, end=&quot; &quot;) 执行以上程序，输出结果如下： 1 2 3 4 也可以使用 next() 函数： #!/usr/bin/python3 import sys # 引入 sys 模块 list=[1,2,3,4] it = iter(list) # 创建迭代器对象 while True: try: print (next(it)) except StopIteration: sys.exit() 执行以上程序，输出结果如下： 1 2 3 4 生成器 在 Python 中，使用了 yield 的函数被称为生成器（generator）。 跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解 生成器就是一个迭代器。 在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回yield的值。并在下一次执行 next()方法时从当前位置继续运行。 以下实例使用 yield 实现斐波那契数列： #!/usr/bin/python3 import sys def fibonacci(n): # 生成器函数 - 斐波那契 a, b, counter = 0, 1, 0 while True: if (counter &gt; n): return yield a a, b = b, a + b counter += 1 f = fibonacci(10) # f 是一个迭代器，由生成器返回生成 while True: try: print (next(f), end=&quot; &quot;) except StopIteration: sys.exit() 执行以上程序，输出结果如下： 0 1 1 2 3 5 8 13 21 34 55 有一篇更详细的的帖子，对实现斐波那契数列的不同方式内存的优劣给出了不同的例子 博客地址。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Learning | 五 Python的面向对象]]></title>
      <url>%2F2017%2F04%2F13%2FLearning-5%2F</url>
      <content type="text"><![CDATA[python作为面向对象语言，自然具有面向对象三大特性：封装，继承和多态。此篇就针对Python的继承及其他一些特性做一个总结。 继承在Python中，同时支持单继承 和 多继承，一般语法： class SubClass(ParentClass [,ParentClass1,……]): class_suite 可以用内建函数issubclass()来判断AClass是不是BaseClass的子类，has-a关系。 class Parent(object): &apos;&apos;&apos; parent class &apos;&apos;&apos; numList = [] def numAdd(self, a, b): return a+b class Child(Parent): pass c = Child() # subclass will inherit attributes from parent class Child.numList.extend(range(10)) print Child.numList print &quot;2 + 5 =&quot;, c.numAdd(2, 5) # built-in function issubclass() print issubclass(Child, Parent) print issubclass(Child, object) # __bases__ can show all the parent classes print Child.__bases__ # doc string will not be inherited print Parent.__doc__ print Child.__doc__ 要注意的是 __doc__ 文档字符串，它对于类，函数/方法，以及模块来说是唯一的，也就是说__doc__属性是不能从父类中继承的。 继承中的__init__当出现继承时，一定要注意初始化函数__init__的行为 1.如果子类没有定义自己的初始化函数，父类的初始化函数会被默认调用；但是如果要实例化子类的对象，则只能传入父类的初始化函数对应的参数，否则会出错 class Parent(object): def __init__(self, data): self.data = data print &quot;create an instance of:&quot;,self.__class__.__name__ print &quot;data attribute is:&quot;, self.data class Child(Parent): pass c = Child(&quot;init Child&quot;) print c = Child() 2.如果子类定义了自己的初始化函数，而没有显示调用父类的初始化函数，则父类的属性不会被初始化 class Parent(object): def __init__(self, data): self.data = data print &quot;create an instance of:&quot;,self.__class__.__name__ print &quot;data attribute is:&quot;, self.data class Child(Parent): def __init__(self): print &quot;call __init__ from Child class&quot; c = Child() print c.data 3.如果子类定义了自己的初始化函数，显示调用父类，子类和父类的属性都会被初始化 class Parent(object): def __init__(self, data): self.data = data print &quot;create an instance of:&quot;, self.__class__.__name__ print &quot;data attribute is:&quot;, self.data class Child(Parent): def __init__(self): print &quot;call __init__ from Child class&quot; super(Child, self).__init__(&quot;data from Child&quot;) c = Child() print c.data super 在子类中，一般会定义与父类相同的属性（数据属性，方法），从而来实现子类特有的行为。也就是说，子类会继承父类的所有的属性和方法，子类也可以覆盖父类同名的属性和方法 class Parent(object): fooValue = &quot;Hi, Parent foo value&quot; def foo(self): print &quot;This is foo from Parent&quot; class Child(Parent): fooValue = &quot;Hi, Child foo value&quot; def foo(self): print &quot;This is foo from Child&quot; c = Child() c.foo() print Child.fooValue 在这段代码中，子类的属性”fooValue”和”foo”覆盖了父类的属性，所以子类有了自己的行为. 但是，有时候可能需要在子类中访问父类的一些属性： class Parent(object): fooValue = &quot;Hi, Parent foo value&quot; def foo(self): print &quot;This is foo from Parent&quot; class Child(Parent): fooValue = &quot;Hi, Child foo value&quot; def foo(self): print &quot;This is foo from Child&quot; print Parent.fooValue # use Parent class name and self as an argument Parent.foo(self) c = Child() c.foo() 这时候，可以通过父类名直接访问父类的属性，当调用父类的方法是，需要将”self”显示的传递进去的方式。 这种方式有一个不好的地方就是，需要经父类名硬编码到子类中，为了解决这个问题，可以使用Python中的super关键字： class Parent(object): fooValue = &quot;Hi, Parent foo value&quot; def foo(self): print &quot;This is foo from Parent&quot; class Child(Parent): fooValue = &quot;Hi, Child foo value&quot; def foo(self): print &quot;This is foo from Child&quot; # use super to access Parent attribute print super(Child, self).fooValue super(Child, self).foo() c = Child() c.foo() 对于”super(Child, self).foo()”可以理解为，首先找到Child的父类Parent，然后调用父类的foo方法，同时将Child的实例self传递给foo方法。 但是，如果当一个子类有多个父类的时候，super会如何工作呢？这是就需要看看MRO的概念了。 mro 假设现在有一个如下的继承结构，首先通过类名显示调用的方式来调用父类的初始化函数： class A(object): def __init__(self): print &quot; -&gt;Enter A&quot; print &quot; &lt;-Leave A&quot; class B(A): def __init__(self): print &quot; --&gt;Enter B&quot; A.__init__(self) print &quot; &lt;--Leave B&quot; class C(A): def __init__(self): print &quot; ---&gt;Enter C&quot; A.__init__(self) print &quot; &lt;---Leave C&quot; class D(B, C): def __init__(self): print &quot;----&gt;Enter D&quot; B.__init__(self) C.__init__(self) print &quot;&lt;----Leave D&quot; d = D() 从输出中可以看到，类A的初始化函数被调用了两次，这不是我们想要的结果：下面，我们通过super方式来调用父类的初始化函数： class A(object): def __init__(self): print &quot; -&gt;Enter A&quot; print &quot; &lt;-Leave A&quot; class B(A): def __init__(self): print &quot; --&gt;Enter B&quot; super(B, self).__init__() print &quot; &lt;--Leave B&quot; class C(A): def __init__(self): print &quot; ---&gt;Enter C&quot; super(C, self).__init__() print &quot; &lt;---Leave C&quot; class D(B, C): def __init__(self): print &quot;----&gt;Enter D&quot; super(D, self).__init__() print &quot;&lt;----Leave D&quot; d = D() 通过输出可以看到，当使用super后，A的初始化函数只能调用了一次. 为什么super会有这种效果？下面就开始看看Python中的方法解析顺序MRO（Method Resolution Order）。 Python的类有一个__mro__属性，这个属性中就保存着方法解析顺序。结合上面的例子来看看类D的__mro__: &gt;&gt;&gt; print &quot;MRO:&quot;, [x.__name__ for x in D.__mro__] MRO: [&apos;D&apos;, &apos;B&apos;, &apos;C&apos;, &apos;A&apos;, &apos;object&apos;] &gt;&gt;&gt; slotspython中为一个类创建了实例之后，可以给实例添加属性，但是这些属性只属于这个实例。 但是，有些时候需要限制类实例对象这样动态的添加属性，这时就要用到类中的slots属性了。slots属性对应着一个tuple，只有在这个tuple中出现的属性才可以被类实例使用。 class Student(object): __slots__ = (&quot;name&quot;, &quot;age&quot;) def __init__(self, name, age): self.name = name self.age = age s = Student(&quot;Wilber&quot;, 28) print &quot;%s is %d years old&quot; %(s.name, s.age) s.score = 96 在这段代码中，当为Student添加score时会报错AttributeError，因为score不在 声明的slots中。 slots在继承中会表现出一些规则 如果父类包含对slots的定义，子类不包含对slots的定义，解释器&gt;忽略slots的作用，子类不会继承父类的slots特性如果父类包含对slots的定义，子类包含对slots的定义，并且无论元组的的元素个数，解释器都会按照父类的slots和子类的slots的并集 总结 Python中使用多继承的时候，可以使用super关键字去访问父类中被子类覆盖的方法； 对于方法的调用，用到了__mro__ 对__slots__属性：通过这个属性可以限制类实例的可用属性]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python learning | 四]]></title>
      <url>%2F2017%2F04%2F12%2FLearning-4%2F</url>
      <content type="text"><![CDATA[Python中的线程]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python learning | 三]]></title>
      <url>%2F2017%2F04%2F11%2FLearning-3%2F</url>
      <content type="text"><![CDATA[爬虫相关 关于scrapy 和 pyspiderpyspider 有自己的操作界面，scrapy项目基于框架写代码，调试的难度高于pyspider安装都是通过 pip 来安装。 scrapy 安装 pip install scrapy 安装时一直报错1234Found existing installation: six 1.4.1DEPRECATION: Uninstalling a distutils installed project (six) has been deprecated and will be removed in a future version. This is due to the fact that uninstalling a distutils project will only partially uninstall the project. Uninstalling six-1.4.1:Exception: 在Stack Overflow上找到解决方法： sudo pip install scrapy --ignore-installed six pyspider的安装及遇到的问题 pip install pyspider 出现报错，关键点是： opetation not permitted 问题分析：在经历了Xcdoe ghost以后，苹果加强了安全控制，启用了更高的安全性保护机制 —系统完整性保护（system Integrity Protection）SIP,在10.11以上的版本会出现此类错误，即使是sudo模式。 解决这个的办法是： 在安装完相应类库后，再次进入恢复模式开启SIP： csrutil anable pyspider的使用 在pyspider安装成功后，执行pyspider命令出现： phantomjs not found, continue running without it. 这是缺少phantomjs引起的。 PhantomJS PhantomJS 是一个基于 WebKit 的服务器端 JavaScript API。它全面支持web而不需浏览器支持，其快速，原生支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。 PhantomJS 可以用于 页面自动化 ， 网络监测 ， 网页截屏 ，以及 无界面测试 等。mac下通过 brew 安装 ： brew install phantomjs 再次执行pyspider有出现新问题： pyspider Error: Could not create web server listening on port 25555 接着折腾 在github的issue中找到 #423 : Reboot the PC,or remove phantomjs can fix it. 刚装过phantomjs，不可能现在就卸载，所以 重启竟然成功了重新 执行 pyspider 输出：phantomjs fetcher running on port 25555 启动成功了 ！ 打开浏览器访问 http://localhost:5000/ 至此，pyspider安装完成了，后面就要对scrapy和pyspider的进一步深入学习]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python learning | 二]]></title>
      <url>%2F2017%2F04%2F11%2FLearning-2%2F</url>
      <content type="text"><![CDATA[Python中有很多强大的类库，比如numpy，scipy等，此篇就是常用类库安装及学习 硬件操作相关 pyfirmata 可以通过pip安装： pip install pyfirmata 邮件操作相关 yagmail 可以通过pip安装： pip install yagmail 头文件自动补全 关于开发工具pycharm里头文件自动补全的设置 想要某个文件或者lib里的文件能够自动补全，则需要将它们链接到目录/Library/Python/2.7/site-packages中如要将openCV的文件cv.py,cv2.so链接到 /Library/Python/2.7/site-packages中的具体做法如下： cd /Library/Python/2.7/site-packages sudo ln -s ~/opencv/build/lib/cv.py cv.py sudo ln -s ~/opencv/build/lib/cv2.so cv2.so openCV的路径以实际自己的安装路径为准，如果没有cv.py，则创建，其中只有一行代码： from cv2.cv import * 这就是代码的自动补全功能，其他库可以参照此方法设置]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python learning | 一]]></title>
      <url>%2F2017%2F04%2F11%2FLearning-1%2F</url>
      <content type="text"><![CDATA[mac上 openCV的安装在mac上安装openCV的过程还是挺曲折的，下面列出安装的详细步骤及在安装过程中遇到的问题 去 http://opencv.org 下载最新版OpenCV for Linux/Mac源文件tar.gz文件，解压缩 brew安装cmake brew install cmake cd到解压后的文件夹中， 继续执行如下命令： 1234567891.mkdir release 2.cd release 3.cmake -G &quot;Unix Makefiles&quot; .. 4.make #此处会进行make的相关操作，会耗费很大一会 5.sudo make install #install lib文件到/usr/local/lib/，头文件到 /usr/local/include/ 至此，openCV安装完成 注：如果cmake出现错误，请到苹果开发者网站那里下载Command Line Tools安装。（关键） 由于要做python项目，在import cv2时报ImportError: No module named cv2的错误，下面还要设置环境变量: 12345671.打开一个终端，cd ~ 2.vim .profile 3.添加export PYTHONPATH=/usr/local/lib/python2.7/site-packages/，其中python2.7根据个人python版本而定。 4.source .profile 至此openCV的安装工作全部完成了！ openCV 的简单使用123456789#coding:utf-8import cv2img = cv2.imread(&apos;&apos;) #加载路径下的一张图片cv2.namedWindow(&quot;Image&quot;) #创建一个窗口cv2.imshow(&quot;Image&quot;, img) #窗口中显示图像cv2.waitKey (0) cv2.destroyAllWindows() #释放 2017.04.07关于openCV的进一步使用openCV安装后找不到相关类库 可以在这里 下载及阅读人脸识别的源码，特别是readme，一定要仔细看一遍再去跑工程。关于Python2和Python3不同版本的坑已经很多了，这里同样遇到了版本不同埋的坑，openCV2和openCV3也是有很大不同的，按照blog上的提示， 一定不要略过blog而去直接跑工程一定不要略过readme 会轻松很多，避免踩坑]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[国富论]]></title>
      <url>%2F2017%2F04%2F11%2Fguofulun%2F</url>
      <content type="text"><![CDATA[国富论亚当.斯密这是国家复兴的秘密，这是一代伟大人物的独特视角！ 想看更多 给作者留言 &#x75;&#116;&#114;&#x61;&#115;&#110;&#111;&#x77;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[md格式学习]]></title>
      <url>%2F2017%2F04%2F11%2FMyFistBlog%2F</url>
      <content type="text"><![CDATA[md格式学习&lt;论语&gt; 孔子曰:打架用砖乎!不亦乱乎! 照脸乎!乎不死,再乎! 孔子用转图 以下全是重要内容孔子用代码教育弟子： 12345678910def husi() print &apos;岂可一人独乎 !&apos;husi();def test() print &apos;大家一起乎,不亦乐乎&apos;test() *代码版权归属 &#117;&#116;&#114;&#97;&#x73;&#x6e;&#x6f;&#119;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d; 放个数学公式： A S T = B 更多内容联系作者 &#x66;&#x61;&#110;&#x65;&#x79;&#x6f;&#x75;&#110;&#103;&#x40;&#104;&#x6f;&#116;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109; 这是无序列表 这是一个无序列表的L1 L2 L3 L4 这是有序列表 row1 row2 row3]]></content>
    </entry>

    
  
  
</search>
